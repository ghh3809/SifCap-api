<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kotoumi.sifcapapi.dao.mapper.LlProxyMapper">

    <select id="searchUser" resultType="com.kotoumi.sifcapapi.model.vo.service.User">
        select *
        from user
        <where>user_id like "%"#{keyword}"%" or name like "%"#{keyword}"%" or invite_code like "%"#{keyword}"%"</where>
        limit #{limit}
    </select>

    <select id="findUser" resultType="com.kotoumi.sifcapapi.model.vo.service.User">
        select *
        from user
        <where>user_id = #{userId}</where>
        limit 1
    </select>

    <select id="searchLive" resultType="com.kotoumi.sifcapapi.model.vo.service.Live">
        select play.*,
               setting.*,
               live_track_m_${lang}.name,
               live_track_m_${lang}.title_asset,
               live_track_m_${lang}.sound_asset,
               event_map.event_name
        from (
            select * from live_play where user_id = #{userId}
            <if test="eventId != null">
                and event_id = #{eventId}
            </if>
            <choose>
                <when test="isDuel == 1">
                    and event_id = -1
                </when>
                <otherwise>
                    and event_id != -1
                </otherwise>
            </choose>
        ) play
        left join (
            (select live_difficulty_id, live_setting_id from normal_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from special_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from event_live_m)
        ) live_difficulty
        on play.live_difficulty_id = live_difficulty.live_difficulty_id
        left join (
            select live_setting_id,
                   difficulty,
                   stage_level,
                   live_icon_asset,
                   live_track_id
            from live_setting_m_${lang}
            <if test="setId != null">
                where live_setting_id = #{setId}
            </if>
        ) setting
        on live_difficulty.live_setting_id = setting.live_setting_id
        left join live_track_m_${lang}
        on setting.live_track_id = live_track_m_${lang}.live_track_id
        left join event_map
        on play.event_id = event_map.event_id
        <where>
            <if test="setId != null">
                live_difficulty.live_setting_id = #{setId}
            </if>
            <if test="keyword != null">
                and (live_track_m_${lang}.name like "%"#{keyword}"%" or event_map.event_name like "%"#{keyword}"%")
            </if>
        </where>
        order by play.id desc
        limit #{start}, #{limit}
    </select>

    <select id="findLive" resultType="com.kotoumi.sifcapapi.model.vo.service.Live">
        select play.*,
               setting.*,
               live_track_m_${lang}.name,
               live_track_m_${lang}.title_asset,
               live_track_m_${lang}.sound_asset,
               event_map.event_name
        from (
            select * from live_play where id = #{id}
        ) play
        left join (
            (select live_difficulty_id, live_setting_id from normal_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from special_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from event_live_m)
        ) live_difficulty
        on play.live_difficulty_id = live_difficulty.live_difficulty_id
        left join (
            select live_setting_id,
                   difficulty,
                   stage_level,
                   live_icon_asset,
                   live_track_id
            from live_setting_m_${lang}
        ) setting
        on live_difficulty.live_setting_id = setting.live_setting_id
        left join live_track_m_${lang}
        on setting.live_track_id = live_track_m_${lang}.live_track_id
        left join event_map
        on play.event_id = event_map.event_id
        limit 1
    </select>

    <select id="countLive" resultType="Integer">
        select count(1)
        from (
            select * from live_play where user_id = #{userId}
            <if test="eventId != null">
                and event_id = #{eventId}
            </if>
            <choose>
                <when test="isDuel == 1">
                    and event_id = -1
                </when>
                <otherwise>
                    and event_id != -1
                </otherwise>
            </choose>
        ) play
        left join (
            (select live_difficulty_id, live_setting_id from normal_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from special_live_m_${lang})
            union all
            (select live_difficulty_id, live_setting_id from event_live_m)
        ) live_difficulty
        on play.live_difficulty_id = live_difficulty.live_difficulty_id
        left join (
            select live_setting_id,
                   difficulty,
                   stage_level,
                   live_icon_asset,
                   live_track_id
            from live_setting_m_${lang}
            <if test="setId != null">
                where live_setting_id = #{setId}
            </if>
        ) setting
            on live_difficulty.live_setting_id = setting.live_setting_id
            left join live_track_m_${lang}
            on setting.live_track_id = live_track_m_${lang}.live_track_id
            left join event_map
            on play.event_id = event_map.event_id
        <where>
            <if test="setId != null">
                live_difficulty.live_setting_id = #{setId}
            </if>
            <if test="keyword != null">
                and (live_track_m_${lang}.name like "%"#{keyword}"%" or event_map.event_name like "%"#{keyword}"%")
            </if>
        </where>
    </select>

    <select id="findUnits" resultType="com.kotoumi.sifcapapi.model.vo.service.Unit">
        select unit_id,
               unit_number,
               eponym,
               name,
               IF(unit_number >= 10000, normal_icon_asset, concat('git/SIFStatic/icon/normal/', unit_number, '.png')) as normal_icon_asset,
               IF(unit_number >= 10000, rank_max_icon_asset, concat('git/SIFStatic/icon/rankup/', unit_number, '.png')) as rank_max_icon_asset,
               default_removable_skill_capacity,
               smile_max,
               pure_max,
               cool_max
        from unit_m_${lang}
        <where>
            unit_id in
            <foreach collection="unitList" item="unitId" index="index" open="(" close=")" separator=",">
                #{unitId}
            </foreach>
        </where>
    </select>

    <select id="findUnitsByOwningIds" resultType="com.kotoumi.sifcapapi.model.vo.service.Unit">
        select unit_list.*,
               unit_m_${lang}.rarity,
               unit_m_${lang}.eponym,
               unit_m_${lang}.name,
               unit_m_${lang}.unit_number,
               IF(unit_m_${lang}.unit_number >= 10000, unit_m_${lang}.normal_icon_asset, concat('git/SIFStatic/icon/normal/', unit_m_${lang}.unit_number, '.png')) as normal_icon_asset,
               IF(unit_m_${lang}.unit_number >= 10000, unit_m_${lang}.rank_max_icon_asset, concat('git/SIFStatic/icon/rankup/', unit_m_${lang}.unit_number, '.png')) as rank_max_icon_asset,
               unit_m_${lang}.default_removable_skill_capacity,
               unit_m_${lang}.smile_max,
               unit_m_${lang}.pure_max,
               unit_m_${lang}.cool_max
        from (
            select * from unit
            <where>user_id = #{userId} and unit_owning_user_id in
                <foreach
                    collection="unitList" item="unitId" index="index" open="(" close=")" separator=",">
                    #{unitId}
                </foreach>
                <choose>
                    <when test="islive == 1">
                        and status = 'deck'
                    </when>
                    <otherwise>
                        and (status = 'active' or status = 'waiting')
                    </otherwise>
                </choose>
            </where>
        ) unit_list
        inner join unit_m_${lang}
        on unit_list.unit_id = unit_m_${lang}.unit_id
    </select>

    <select id="searchUnits" resultType="com.kotoumi.sifcapapi.model.vo.service.Unit">
        select units.*,
               unit_info.rarity,
               unit_info.rarity_string,
               unit_info.eponym,
               unit_info.name,
               unit_info.unit_number,
               unit_info.normal_icon_asset,
               unit_info.rank_max_icon_asset,
               unit_info.default_removable_skill_capacity,
               unit_info.smile_max,
               unit_info.pure_max,
               unit_info.cool_max
        from (
            select * from unit where user_id = #{userId} and (
                <choose>
                    <when test="islive == 1">
                        status = 'deck' and update_time > CURRENT_TIMESTAMP - INTERVAL 30 DAY
                    </when>
                    <otherwise>
                        status = 'active'
                        <if test="back == 1">
                            or status = 'waiting'
                        </if>
                    </otherwise>
                </choose>
        )) units
        inner join (
            select unit_id, unit_number, rarity, case rarity when 1 then 'N' when 2 then 'R' when 3 then 'SR' when 4 then 'UR' when 5 then 'SSR' else '' end as rarity_string,
                   eponym, name, IF(unit_number >= 10000, normal_icon_asset, concat('git/SIFStatic/icon/normal/', unit_number, '.png')) as normal_icon_asset,
                   IF(unit_number >= 10000, rank_max_icon_asset, concat('git/SIFStatic/icon/rankup/', unit_number, '.png')) as rank_max_icon_asset,
                   smile_max, pure_max, cool_max, default_removable_skill_capacity
            from unit_m_${lang}
            where (rarity = 4
            <if test="ssr == 1">
                or rarity = 5
            </if>
            <if test="sr == 1">
                or rarity = 3
            </if>
        )) unit_info
        on units.unit_id = unit_info.unit_id
        order by unit_info.rarity_string desc, units.unit_id
        limit #{start}, #{limit}
    </select>

    <select id="countUnits" resultType="Integer">
        select count(1)
        from (
            select * from unit where user_id = #{userId} and (
        <choose>
            <when test="islive == 1">
                status = 'deck' and update_time > CURRENT_TIMESTAMP - INTERVAL 30 DAY
            </when>
            <otherwise>
                status = 'active'
                <if test="back == 1">
                    or status = 'waiting'
                </if>
            </otherwise>
        </choose>
        )) units
        inner join (
            select unit_id from unit_m_${lang}
            where (rarity = 4
            <if test="ssr == 1">
                or rarity = 5
            </if>
            <if test="sr == 1">
                or rarity = 3
            </if>
        )) unit_info
        on units.unit_id = unit_info.unit_id
    </select>

    <select id="exportUnits" resultType="com.kotoumi.sifcapapi.model.vo.response.LLHelperUnit">
        select unit_info.unit_number as cardid,
               units.`rank` - 1 as mezame,
               units.unit_skill_level as skilllevel,
               units.unit_removable_skill_capacity as maxcost
        from (
            select * from unit where user_id = #{userId} and (
        <choose>
            <when test="islive == 1">
                status = 'deck' and update_time > CURRENT_TIMESTAMP - INTERVAL 30 DAY
            </when>
            <otherwise>
                status = 'active'
                <if test="back == 1">
                    or status = 'waiting'
                </if>
            </otherwise>
        </choose>
        )) units
        inner join (
        select unit_id, unit_number from unit_m_${lang}
        where (rarity = 4
            <if test="ssr == 1">
                or rarity = 5
            </if>
            <if test="sr == 1">
                or rarity = 3
            </if>
        )) unit_info
        on units.unit_id = unit_info.unit_id
    </select>

    <select id="searchSecretBoxLog" resultType="com.kotoumi.sifcapapi.model.vo.service.SecretBoxLog">
        select box.user_id,
               box.secret_box_id,
               box.name,
               SUM(IF(box.rarity = 1, 1, 0)) as normal_cnt,
               SUM(IF(box.rarity = 2, 1, 0)) as rare_cnt,
               SUM(IF(box.rarity = 3, 1, 0)) as sr_cnt,
               SUM(IF(box.rarity = 5, 1, 0)) as ssr_cnt,
               SUM(IF(box.rarity = 4, 1, 0)) as ur_cnt,
               box.pon_time,
               JSON_ARRAYAGG(JSON_OBJECT(
                   'unit_id', box.unit_id,
                   'rank', box.rank,
                   'rarity', box.rarity,
                   'normal_icon_asset', unit_info.normal_icon_asset,
                   'rank_max_icon_asset', unit_info.rank_max_icon_asset
                   )) as unitsJson
        from (
            select * from secret_box where user_id = #{userId}
            <choose>
                <when test="type == 1">
                    and (secret_box_id = 1 or secret_box_id = 61)
                </when>
                <otherwise>
                    and secret_box_id != 1 and secret_box_id != 61
                </otherwise>
            </choose>
        ) box
        left join (
            select unit_id,
                   unit_number,
                   eponym,
                   name,
                   IF(unit_number >= 10000, normal_icon_asset, concat('git/SIFStatic/icon/normal/', unit_number, '.png')) as normal_icon_asset,
                   IF(unit_number >= 10000, rank_max_icon_asset, concat('git/SIFStatic/icon/rankup/', unit_number, '.png')) as rank_max_icon_asset,
                   rarity
            from unit_m_${lang}
        ) unit_info
        on box.unit_id = unit_info.unit_id
        group by box.user_id, box.secret_box_id, box.name, box.pon_time
        order by box.pon_time desc
        limit #{start}, #{limit}
    </select>

    <select id="countSecretBoxLog" resultType="Integer">
        select count(1) from (
            select user_id, secret_box_id, name, pon_time from secret_box where user_id = #{userId}
            <choose>
                <when test="type == 1">
                    and (secret_box_id = 1 or secret_box_id = 61)
                </when>
                <otherwise>
                    and secret_box_id != 1 and secret_box_id != 61
                </otherwise>
            </choose>
            group by user_id, secret_box_id, name, pon_time
        ) a
    </select>

    <select id="findDecks" resultType="com.kotoumi.sifcapapi.model.vo.service.Deck">
        select * from deck
        where user_id = #{userId}
        <if test="unitDeckId != null">
            and unit_deck_id = #{unitDeckId}
        </if>
        order by unit_deck_id
    </select>

    <select id="searchEffortBoxLog" resultType="com.kotoumi.sifcapapi.model.vo.service.EffortBox">
        select * from effort_box
        <choose>
            <when test="minOpenTime != null">
                <where>
                    <if test="userId != 0">
                        user_id = #{userId}
                    </if>
                    and open_time > #{minOpenTime}
                </where>
                order by open_time
            </when>
            <otherwise>
                where user_id = #{userId}
                <if test="limited == 1">
                    and limited_effort_event_id is not null
                </if>
                order by open_time desc
            </otherwise>
        </choose>
        limit #{start}, #{limit}
    </select>

    <select id="countEffortBoxLog" resultType="Integer">
        select count(1) from effort_box
        where user_id = #{userId}
        <if test="limited == 1">
            and limited_effort_event_id is not null
        </if>
    </select>

    <select id="getLimitedBoxAsset" resultType="String">
        select box_asset from limited_effort_box_asset_m_${lang}
        where limited_effort_event_id = #{limitedEffortEventId}
        and live_effort_point_box_spec_id = #{liveEffortPointBoxSpecId}
    </select>

    <select id="findAddTypes" resultType="com.kotoumi.sifcapapi.model.vo.service.AddType">
        select * from add_type_m_${lang}
        <where>
            add_type in
            <foreach collection="addTypeSet" item="addType" index="index" open="(" close=")" separator=",">
                #{addType}
            </foreach>
        </where>
    </select>

    <select id="findUnitRemovableSkills" resultType="com.kotoumi.sifcapapi.model.vo.service.UnitRemovableSkill">
        select * from unit_removable_skill_m_${lang}
        <where>
            unit_removable_skill_id in
            <foreach collection="removableIdList" item="removableId" index="index" open="(" close=")" separator=",">
                #{removableId}
            </foreach>
        </where>
    </select>

    <select id="findAward" resultType="com.kotoumi.sifcapapi.model.vo.service.Award">
        select * from award_m_${lang}
        where award_id = #{awardId}
        limit 1
    </select>

    <select id="findAwards" resultType="com.kotoumi.sifcapapi.model.vo.service.Award">
        select * from award_m_${lang}
        <where>
            award_id in
            <foreach collection="awardIdList" item="awardId" index="index" open="(" close=")" separator=",">
                #{awardId}
            </foreach>
        </where>
    </select>

    <select id="findBackground" resultType="com.kotoumi.sifcapapi.model.vo.service.Background">
        select * from background_m_${lang}
        where background_id = #{backgroundId}
        limit 1
    </select>

</mapper>