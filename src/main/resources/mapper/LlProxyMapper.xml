<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kotoumi.sifcapapi.dao.mapper.LlProxyMapper">

    <select id="searchUser" resultType="com.kotoumi.sifcapapi.model.vo.service.User">
        select *
        from user
        <where>user_id like "%"#{keyword}"%" or name like "%"#{keyword}"%" or invite_code like "%"#{keyword}"%"</where>
        limit #{limit}
    </select>

    <select id="findUser" resultType="com.kotoumi.sifcapapi.model.vo.service.User">
        select *
        from user
        <where>user_id = #{userId}</where>
        limit 1
    </select>

    <select id="searchLive" resultType="com.kotoumi.sifcapapi.model.vo.service.Live">
        select play.*,
               setting.*,
               live_track_m.name,
               live_track_m.title_asset,
               live_track_m.sound_asset,
               event_map.event_name
        from (
            select * from live_play where user_id = #{userId}
            <if test="eventId != null">
                and event_id = #{eventId}
            </if>
        ) play
        left join (
            (select live_difficulty_id, live_setting_id from normal_live_m)
            union all
            (select live_difficulty_id, live_setting_id from special_live_m)
            union all
            (select live_difficulty_id, live_setting_id from event_live_m)
        ) live_difficulty
        on play.live_difficulty_id = live_difficulty.live_difficulty_id
        left join (
            select live_setting_id,
                   difficulty,
                   stage_level,
                   live_icon_asset,
                   live_track_id
            from live_setting_m
            <if test="setId != null">
                where live_setting_id = #{setId}
            </if>
        ) setting
        on live_difficulty.live_setting_id = setting.live_setting_id
        left join live_track_m
        on setting.live_track_id = live_track_m.live_track_id
        left join event_map
        on play.event_id = event_map.event_id
        <where>
            <if test="setId != null">
                live_difficulty.live_setting_id = #{setId}
            </if>
            <if test="keyword != null">
                and (live_track_m.name like "%"#{keyword}"%" or event_map.event_name like "%"#{keyword}"%")
            </if>
        </where>
        order by play.id desc
        limit #{start}, #{limit}
    </select>

    <select id="countLive" resultType="Integer">
        select count(1)
        from (
            select * from live_play where user_id = #{userId}
            <if test="eventId != null">
                and event_id = #{eventId}
            </if>
        ) play
        left join (
            (select live_difficulty_id, live_setting_id from normal_live_m)
            union all
            (select live_difficulty_id, live_setting_id from special_live_m)
            union all
            (select live_difficulty_id, live_setting_id from event_live_m)
        ) live_difficulty
        on play.live_difficulty_id = live_difficulty.live_difficulty_id
        left join (
            select live_setting_id,
                   difficulty,
                   stage_level,
                   live_icon_asset,
                   live_track_id
            from live_setting_m
            <if test="setId != null">
                where live_setting_id = #{setId}
            </if>
        ) setting
            on live_difficulty.live_setting_id = setting.live_setting_id
            left join live_track_m
            on setting.live_track_id = live_track_m.live_track_id
            left join event_map
            on play.event_id = event_map.event_id
        <where>
            <if test="setId != null">
                live_difficulty.live_setting_id = #{setId}
            </if>
            <if test="keyword != null">
                and (live_track_m.name like "%"#{keyword}"%" or event_map.event_name like "%"#{keyword}"%")
            </if>
        </where>
    </select>

    <select id="findUnit" resultType="com.kotoumi.sifcapapi.model.vo.service.Unit">
        select *
        from unit_m
        <where>unit_id = #{unitId}</where>
        limit 1
    </select>

    <select id="searchUnits" resultType="com.kotoumi.sifcapapi.model.vo.service.Unit">
        select units.*,
               unit_info.rarity,
               unit_info.rarity_string,
               unit_info.eponym,
               unit_info.name,
               unit_info.normal_icon_asset,
               unit_info.rank_max_icon_asset
        from (
            select * from unit where user_id = #{userId}
        ) units
        inner join (
            select unit_id, rarity, case rarity when 1 then 'N' when 2 then 'R' when 3 then 'SR' when 4 then 'UR' when 5 then 'SSR' else '' end as rarity_string,
                   eponym, name, normal_icon_asset, rank_max_icon_asset from unit_m
            where rarity &gt;= 3
        ) unit_info
        on units.unit_id = unit_info.unit_id
        order by unit_info.rarity_string desc, units.unit_id
        limit #{start}, #{limit}
    </select>

    <select id="countUnits" resultType="Integer">
        select count(1)
        from (
            select * from unit where user_id = #{userId}
        ) units
        inner join (
            select unit_id from unit_m where rarity &gt;= 3
        ) unit_info
        on units.unit_id = unit_info.unit_id
    </select>

    <select id="exportUnits" resultType="com.kotoumi.sifcapapi.model.vo.response.LLHelperUnit">
        select unit_info.unit_number as cardid,
               units.`rank` - 1 as mezame,
               units.unit_skill_level as skilllevel,
               units.unit_removable_skill_capacity as maxcost
        from (
             select * from unit where user_id = #{userId}
        ) units
        inner join (
            select unit_id, unit_number from unit_m
            where rarity &gt;= 3
        ) unit_info
        on units.unit_id = unit_info.unit_id
    </select>

    <select id="searchSecretBoxLog" resultType="com.kotoumi.sifcapapi.model.vo.service.SecretBoxLog">
        select box.user_id,
               box.secret_box_id,
               box.name,
               SUM(IF(box.rarity = 1, 1, 0)) as normal_cnt,
               SUM(IF(box.rarity = 2, 1, 0)) as rare_cnt,
               SUM(IF(box.rarity = 3, 1, 0)) as sr_cnt,
               SUM(IF(box.rarity = 5, 1, 0)) as ssr_cnt,
               SUM(IF(box.rarity = 4, 1, 0)) as ur_cnt,
               box.pon_time,
               JSON_ARRAYAGG(JSON_OBJECT(
                   'unit_id', box.unit_id,
                   'rank', box.rank,
                   'rarity', box.rarity,
                   'normal_icon_asset', unit_info.normal_icon_asset,
                   'rank_max_icon_asset', unit_info.rank_max_icon_asset
                   )) as unitsJson
        from (
            select * from secret_box where user_id = #{userId}
            <choose>
                <when test="type == 1">
                    and (secret_box_id = 1 or secret_box_id = 61)
                </when>
                <otherwise>
                    and secret_box_id != 1 and secret_box_id != 61
                </otherwise>
            </choose>
        ) box
        left join (
            select * from unit_m
        ) unit_info
        on box.unit_id = unit_info.unit_id
        group by box.user_id, box.secret_box_id, box.name, box.pon_time
        order by box.pon_time desc
        limit #{start}, #{limit}
    </select>

    <select id="countSecretBoxLog" resultType="Integer">
        select count(1) from (
            select secret_box.user_id, secret_box.secret_box_id, secret_box.name, secret_box.pon_time from secret_box where user_id = #{userId}
            <choose>
                <when test="type == 1">
                    and (secret_box_id = 1 or secret_box_id = 61)
                </when>
                <otherwise>
                    and secret_box_id != 1 and secret_box_id != 61
                </otherwise>
            </choose>
            group by secret_box.user_id, secret_box.secret_box_id, secret_box.name, secret_box.pon_time
        ) a
    </select>

</mapper>